(function($, helpers) {
  $(function() {
    // --------------------------------------------------------------------
    // 1. Setup Variables
    // --------------------------------------------------------------------

    var $window = $(window),
      $html = $('html'),
      $body = $('body'),
      $main = $('#main'),
      $header = $('.js-site-header'),
      $footer = $('.js-site-footer'),
      $sidebar = $('.sidebar'),
      allowUpscale = $html.is('.upscale'),
      isLayoutHorizontal = $html.is('.horizontal-page'),
      isLayoutWithoutScroll = isLayoutHorizontal && $html.is('.no-scroll');

    // --------------------------------------------------------------------
    // 2. Setup plugins
    // --------------------------------------------------------------------

    // Improves click response on mobile devices.
    // We Need to check if it's loaded because sometimes it gets blocked by uBlock
    window.FastClick && window.FastClick.attach(document.body);

    //
    // Setup navigation helpers.
    //
    // globalNavigation provides ability to scroll content with keyboard
    // arrows, mouse wheel and simple API calls used by .js-nav-tip.
    //
    window.globalNavigation = (function() {
      var flashClassOnHtml = function(className) {
        $('html').addClass(className);
        setTimeout(function() {
          $('html').removeClass(className);
        }, 100);
      };

      var nav = new Navigation({
        onNextItem: function() {
          flashClassOnHtml('global-navigation-on-next');
        },
        onPreviousItem: function() {
          flashClassOnHtml('global-navigation-on-prev');
        },
        onActive: function() {
          $('.js-nav-tip').addClass('nav-tip--visible');
        },
        onInactive: function() {
          $('.js-nav-tip').removeClass('nav-tip--visible');
        }
      });

      $('.js-nav-tip__next').click(nav.nextItem);
      $('.js-nav-tip__prev').click(nav.previousItem);
      nav.setItems($('.js-global-nav-item'));

      return nav;
    })();

    // Appreciate project plugin
    $('.js-btn-appreciate').appreciate();

    // Fluxus Lightbox
    $('.js-link-to-image').fluxusLightbox();

    // Sharrre plugin
    var getSharrreOptions = function($el) {
      var options = {
        services: $el.data('services'),
        enableCounter: !!$el.data('enable-counter'),
        urlCurl: $el.data('url-curl'),
        buttonsTitle: $el.data('buttons-title') || ''
      };

      // Turn array into Object with structure { <<socialNetwork>>: true }
      options.services = _.object(
        _.map(options.services.split(','), function(service) {
          return [service, true];
        })
      );
      return options;
    };

    helpers.runIfFound($('#sharrre-footer'), function($el) {
      var options = getSharrreOptions($el),
        buttonsTemplate;

      if (options.buttonsTitle) {
        buttonsTemplate =
          '<b>' + options.buttonsTitle + '<a href="#" class="close"></a></b>';
      }

      $el.sharrre({
        share: options.services,
        buttonsTemplate: buttonsTemplate,
        enableCounter: options.enableCounter,
        urlCurl: options.urlCurl,
        template:
          '<b class="share">{title}</b>' +
          '<span class="counts">' +
          (options.services.facebook
            ? '<b class="count-facebook">{facebook}</b>'
            : '') +
          (options.services.googlePlus
            ? '<b class="count-plus">{plus}</b>'
            : '') +
          '</span>',
        render: function(self, options) {
          var html = this.template.replace('{title}', options.title);
          html = html.replace('{facebook}', options.count.facebook);
          html = html.replace('{plus}', options.count.googlePlus);
          $(self.element).html(html);
          $el.show();
        }
      });
    });

    helpers.runIfFound($('#sharrre-project'), function($el) {
      var options = getSharrreOptions($el),
        buttonsTemplate;

      if (options.buttonsTitle) {
        buttonsTemplate =
          '<div class="arrow"></div><b>' +
          options.buttonsTitle +
          '<a href="#" class="close"></a></b>';
      }

      $el.sharrre({
        share: options.services,
        buttonsTemplate: buttonsTemplate,
        enableCounter: options.enableCounter,
        urlCurl: options.urlCurl,
        template:
          '<span class="icon"></span><div class="box">' +
          '<a class="share" href="#">{title}</a>' +
          '<b class="count-total">{total}</b>' +
          '</div>',
        render: function(self, options) {
          var total = options.shorterTotal
              ? self.shorterTotal(options.total)
              : options.total,
            html = this.template
              .replace('{title}', options.title)
              .replace('{total}', total);
          $(self.element).html(html);
          $el.css('display', 'inline-block');
        },
        afterLoadButtons: function() {
          var index = 0,
            $buttons = this.$el.find('.button'),
            count = $buttons.each(function() {
              index++;
              $(this).addClass('button-' + index);
            }).length;
          this.$el.addClass('social-services-' + count);
        }
      });
    });

    // --------------------------------------------------------------------
    // 3. Define misc functions and apply fixes
    // --------------------------------------------------------------------

    var $wpadminbar = $('#wpadminbar');
    var wpAdminBarHeight = function() {
      return $wpadminbar.length ? $wpadminbar.outerHeight() : 0;
    };

    var getHorizontalPageHeight = function() {
      return (
        $window.height() -
        $header.outerHeight() -
        $footer.outerHeight() -
        wpAdminBarHeight()
      );
    };

    var menuWalker = function($root) {
      var items = [];

      $root.find('> li > a').each(function() {
        var $el = $(this),
          $parent = $el.parent(),
          $subEl = $el.next(),
          item = {
            href: $el.attr('href'),
            content: $el.html()
          };

        if ($subEl.length) {
          item.children = menuWalker($subEl);
        }
        if ($parent.is('.current_page_item')) {
          item.active = true;
        }
        items.push(item);
      });

      return items;
    };

    if (window.device.ipad) {
      // Simulate menu hover events on iPad
      // Navigate only on double-tap
      var $cascadedLinks = $('.site-navigation .has-children > a');

      $cascadedLinks.click(function(e) {
        var $el = $(this);
        if (!$el.is('.already-tapped')) {
          $cascadedLinks.removeClass('already-tapped');
          $el.addClass('already-tapped').trigger('mouseover');
          e.preventDefault();
        }
      });

      if (isLayoutHorizontal) {
        var scrollToTop = function() {
          // Scroll to top when we have horizontal page.
          // >768 is needed since horizontal pages turn
          // into vertical on small devices (eg. iPad Mini)
          if ($(window).scrollTop() > 0 && $(window).width() > 768) {
            $('body').animate({ scrollTop: 0 }, 200);
          }
        };

        $window.on('orientationchange.ios7-safari-bug.fluxus', function() {
          setTimeout(function() {
            if ($window.height() === 692) {
              scrollToTop();
            }
          }, 200);
        });
      }
    }

    // Fixes menu issue, when popup is outside the screen.
    // Supports WPML menu items.
    $('.site-navigation .has-children, .menu-item-language').hover(
      function() {
        var $submenu = $(this).children('.sub-menu');

        if ($submenu.length) {
          // if popup is outside the screen, then align it by the right side of the screen.
          if (
            $submenu.offset().left +
              $submenu.outerWidth() -
              $(document).scrollLeft() >
            $window.width()
          ) {
            $submenu.addClass('sub-menu-right');
          }
        }
      },
      function() {
        $(this)
          .children('.sub-menu')
          .removeClass('sub-menu-right');
      }
    );

    // --------------------------------------------------------------------
    // 4. Setup global listeners: window.resize
    // --------------------------------------------------------------------

    // General resize
    var scrollListenerAdded = false;
    var isVerticallyScrolled = false;
    helpers.onWindowResize(
      function() {
        var $menuItems;

        // Activate mobile menu if page is smaller than 768
        if ($window.width() <= 768) {
          if (!window.mobileMenu) {
            $menuItems = $('.site-navigation > nav > ul');
            if ($menuItems.length > 0) {
              window.mobileMenu = new BurgerMenu({
                items: menuWalker($menuItems),
                backgroundImage: $('.site-navigation').data('image'),
                container: $('.js-site-header')
              });
            }
          }
          window.mobileMenu && window.mobileMenu.enable();

          if (!isLayoutWithoutScroll && !scrollListenerAdded) {
            scrollListenerAdded = true;
            window.addEventListener(
              'scroll',
              _.throttle(function() {
                var rootEl = document.documentElement;
                var top =
                  (window.pageYOffset || rootEl.scrollTop) -
                  (rootEl.clientTop || 0);
                if (top > 0 && !isVerticallyScrolled) {
                  isVerticallyScrolled = true;
                  $html.addClass('scroll-y');
                } else if (top == 0 && isVerticallyScrolled) {
                  isVerticallyScrolled = false;
                  $html.removeClass('scroll-y');
                }
              }, 100),
              { passive: true }
            );
          }
        } else {
          window.mobileMenu && window.mobileMenu.disable();
        }

        // Re-center vertical content
        setTimeout(function() {
          $('.js-vertical-center').verticalCenter();
        }, 100);
      },
      true,
      'page-resizer'
    );

    // Horizontal page resize
    if (isLayoutHorizontal) {
      helpers.onWindowResize(
        function() {
          // The header is position: fixed we have to calculate
          // the offset for main page dynamically.
          var headerHeight = $header.outerHeight();
          var isLayoutHorizontalVertical = $window.width() <= 768;

          if (isLayoutHorizontalVertical) {
            var windowHeight = $window.height();

            if ($html.is('.no-scroll')) {
              $main.css({
                height: windowHeight - headerHeight,
                top: 0
              });
            } else {
              // Grid layout deals with height separately.
              if (!$html.is('.layout-portfolio-grid')) {
                $main.css({
                  height: 'auto',
                  top: 0
                });
              }
            }
          } else {
            $main.css({
              height: getHorizontalPageHeight(),
              top: headerHeight
            });
          }
        },
        true,
        'horizontal-page'
      );

      $html.addClass('horizontal-page--loaded');

      // Setup tinyscrollbar plugin.
      helpers.runIfFound($('.scroll-container'), function($el) {
        $el.tinyscrollbar();

        helpers.onWindowResize(function() {
          $el.each(function() {
            var $t = $(this),
              tsb = $t.data('tsb');

            $t.find('.scrollbar, .track').css('height', $t.height());
            tsb && tsb.update();
          });
        }, true);
      });
    }

    // --------------------------------------------------------------------
    // 5. Scripts for specific pages
    // --------------------------------------------------------------------

    // Page: Grid Portfolio
    if ($html.is('.layout-portfolio-grid')) {
      (function() {
        var $grid = $('.portfolio-grid'),
          defaults = $.extend($.Grid.defaults, $grid.data()),
          options,
          grid;

        if (!window.getGridOptions) {
          window.getGridOptions = function() {
            var windowWidth = $window.width(),
              windowHeight = $window.height(),
              options = {
                orientation: defaults.orientation,
                rows: defaults.rows,
                columns: defaults.columns
              };

            if (windowWidth <= 568) {
              options.columns = 1;
              options.rows = Math.ceil(windowHeight / 378);
              options.orientation = 'vertical';
            } else if (windowWidth <= 768) {
              if (defaults.columns > 2) {
                options.columns = 2;
              }
              options.rows = Math.ceil(windowHeight / 250);
              options.orientation = 'vertical';
            } else if (windowWidth <= 1024) {
              if (defaults.columns > 3) {
                options.columns = 3;
              }
              if (defaults.rows > 3) {
                options.rows = 3;
              }
            }
            return options;
          };
        }
        options = $.extend(defaults, window.getGridOptions());

        $grid.find('.inner').vcenter();

        options.onRenderStart = function() {
          var options = this.options,
            isVertical = options.orientation === 'vertical',
            isAspectRatioAuto = options.aspectRatio === 'auto',
            itemsPerScreen = options.rows * options.columns,
            pageHeight;

          // When there are more items than could be fitted into
          // a viewport, the footer will get pushed out of screen.
          // So we need to remove it from our container height calculation.
          if (
            isVertical &&
            isAspectRatioAuto &&
            itemsPerScreen < $grid.children().length
          ) {
            pageHeight =
              $window.height() - $header.outerHeight() - options.gutterHeight;
          } else {
            pageHeight = getHorizontalPageHeight();
          }

          $grid.css('height', pageHeight);

          options = window.getGridOptions();
          this.options.orientation = options.orientation;
          this.options.rows = options.rows;
          this.options.columns = options.columns;
        };

        var loadRetinaImage = function($el) {
          if (!$el.data('retina-image-loaded')) {
            $el.data('retina-image-loaded', true);
            var $preview = $el.children('.preview');
            if ($preview.data('max-size')) {
              $.preloadImage($preview.data('max-size')).then(function() {
                $preview.css('background-image', 'url(' + this.src + ')');
              });
            }
          }
        };

        options.onRenderComplete = function(grid, renderData, contextChanged) {
          if (contextChanged) {
            _.each(renderData.coordinates, function(coordinate, index) {
              if (coordinate.width > 1166) {
                loadRetinaImage(grid.$items.eq(index));
              }
            });

            if (this.isHorizontal()) {
              if ($grid.width() < renderData.rightmostX) {
                renderData.$rightmost.css(
                  'padding-right',
                  this.options.gutterWidth
                );
              } else {
                renderData.$rightmost.css('padding-right', 0);
              }
            } else {
              $main.css({
                height: renderData.bottommostY,
                top: 0
              });
            }
          }
        };

        // Enable Grid plugin
        $grid.grid(options);
        grid = $grid.data('grid');

        if (grid.isHorizontal()) {
          globalNavigation.setItems(grid.$items);
          var gutter = grid.options.gutterWidth;

          globalNavigation.options.nextItem = function() {
            var windowRight = $window.scrollLeft() + $window.width() - 30,
              nextItem;

            // Find the first item that is not being fully displayed
            // and scroll to that item.
            $.each(grid.lastRender.coords.coordinates, function(index) {
              if (this.x > windowRight || this.rightX - gutter > windowRight) {
                nextItem = this;
                return false;
              }
            });

            if (nextItem) {
              this.scrollTo(nextItem.rightX - $window.width() + gutter * 2);
            }
          };

          globalNavigation.options.previousItem = function() {
            var windowLeft = $window.scrollLeft(),
              previousItem;

            // Find the first item that is fully visible and scroll to the previous one.
            $.each(grid.lastRender.coords.coordinates, function(index) {
              if (index && this.x >= windowLeft) {
                previousItem = grid.lastRender.coords.coordinates[index - 1];
                return false;
              }
            });

            if (previousItem) {
              this.scrollTo(previousItem.x);
            }
          };
        }
      })();
    }

    //
    // Page: Portfolio Single
    //
    helpers.runIfFound($('.js-portfolio-single'), function($mediaList) {
      var $resizables = $mediaList.find(
        '.js-horizontal-item__resizable, iframe'
      );

      if ($mediaList.is('.portfolio-single--onclick-scroll')) {
        // Activate click to scroll navigation
        $('.js-horizontal-media').on('click.click-to-scroll.fluxus', function(
          event
        ) {
          event.preventDefault();

          var $item = $(this).closest('.js-horizontal-content__item'),
            activeItem = globalNavigation.getActive();
          var $activeItem = activeItem.item;

          if ($activeItem.length && $item.length) {
            if ($item[0] == $activeItem[0]) {
              globalNavigation.nextItem();
            } else {
              globalNavigation.scrollToItem($item);
            }
          }
        });
      } else if ($mediaList.is('.portfolio-single--onclick-lightbox')) {
        // Bind Lightbox to image links and iframes
        $('.js-lightbox-media, .js-horizontal-item iframe').fluxusLightbox({
          onShow: globalNavigation.disable,
          onHide: globalNavigation.enable
        });
      }

      $resizables.each(function() {
        var $el = $(this),
          width = $el.data('width') || $el.attr('width') || 1,
          height = $el.data('height') || $el.attr('height') || 1;

        $el.data({
          height: height,
          ratio: width / height
        });
      });

      /**
       * Captions
       */
      $('.js-horizontal-content__item-caption').each(function() {
        var $el = $(this);
        var initialHeight = $el.outerHeight();

        helpers.onWindowResize(
          function() {
            var contentHeight = $el[0].scrollHeight;
            var hasScroll = initialHeight < contentHeight;
            $el.toggleClass(
              'horizontal-content__item-caption--multiline',
              hasScroll
            );
          },
          true,
          'multiline-caption'
        );

        $el.click(function() {
          var expanded = $el.data('expanded');
          $el.data('expanded', !expanded);

          if (expanded) {
            $el.removeClass('horizontal-content__item-caption--expanded');
          } else {
            $el.css('height', 'auto');
            $el.width();
            $el.addClass('horizontal-content__item-caption--expanded');
          }
        });
      });
    });

    //
    // Page: Vertical Blog
    //
    helpers.runIfFound($('.vertical-blog'), function() {
      var $videos = $('.wrap-embed-video iframe');

      helpers.onWindowResize(
        function() {
          if ($window.width() > 768) {
            $sidebar.css('height', $main.height());
          } else {
            $sidebar.css('height', 'auto');
          }

          $videos.each(function() {
            var $t = $(this),
              maxHeight = $t.attr('height'),
              maxWidth = $t.attr('width'),
              ratio = maxHeight ? maxWidth / maxHeight : false;

            if (ratio) {
              $t.css('width', '100%');
              $t.css('height', parseInt($t.width(), 10) / ratio);
            }
          });
        },
        true,
        'vertical-blog'
      );
    });

    //
    // Page: Horizontal Blog
    //
    helpers.runIfFound($('.horizontal-posts'), function() {
      var $excerpts = $('.js-post-with-media .text-contents'),
        $resizables = $('.resizable'),
        $videos = $('.wrap-embed-video');

      /**
       * Measures the highest content area, then calculates available space
       * and makes sure that every image uses the same height.
       */

      helpers.onWindowResize(
        function() {
          var maxExcerptHeight = $excerpts.highestElement().outerHeight(),
            maxMediaHeight;

          if (!maxExcerptHeight) {
            return;
          }

          maxMediaHeight = $main.height() - maxExcerptHeight;
          maxMediaHeight = maxMediaHeight > 328 ? 328 : maxMediaHeight; // limit max height to 328

          // Set sizes for images
          $resizables.each(function() {
            var $t = $(this),
              postWidth = $t.css('height', maxMediaHeight).width();

            postWidth = postWidth < 583 ? 583 : postWidth;
            $t.closest('.post').css('width', postWidth);
          });

          // Set sizes for videos
          $videos.each(function() {
            var $t = $(this),
              $article = $t.closest('article'),
              $object = $t.children('iframe:first'),
              ratio = $object.data('ratio'),
              postWidth;

            if (!ratio) {
              if ($object.attr('width') && $object.attr('height')) {
                ratio = $object.attr('width') / $object.attr('height');
              } else {
                ratio = 16 / 9;
              }
              $object.data('ratio', ratio);
            }

            postWidth = maxMediaHeight * ratio;
            postWidth = postWidth < 500 ? 500 : postWidth;

            $object.css({
              height: maxMediaHeight,
              width: maxMediaHeight * ratio
            });
            $article.css('width', postWidth);
          });
        },
        true,
        'horizontal-posts'
      );
    });

    //
    // Page: Blog Single
    //
    helpers.runIfFound($('.single-post'), function() {
      var $video = $('.wrap-embed-video iframe');

      if ($video.length) {
        var $videoParent, embedWidth, embedHeight, ratio;

        $videoParent = $video.parent();
        embedWidth = $video.attr('width') || $video.width();
        embedHeight = $video.attr('height') || $video.height();
        ratio = embedWidth / embedHeight;

        helpers.onWindowResize(
          function() {
            var width = $videoParent.width(),
              maxWidth = allowUpscale ? 1080 : embedWidth;

            width = width > maxWidth ? maxWidth : width;

            $video.css({
              width: width,
              height: width / ratio
            });
          },
          true,
          'single-post'
        );
      }
    });

    //
    // Page: Contacts
    //
    helpers.runIfFound($('.page-contacts'), function($el) {
      var $contactsForm = $('.wpcf7'),
        $infobox = $el.find('.page'),
        $viewport = $infobox.children('.viewport'),
        iscroll;

      if ($contactsForm.length) {
        $contactsForm.detach();
        $('#contacts-modal .modal-contents').append($contactsForm);
      }

      $('#send-message').click(function(event) {
        event.preventDefault();
        $('#contacts-modal').reveal({
          closeonbackgroundclick: true,
          middle: true
        });
      });

      iscroll = new IScroll($infobox.get(0), {
        mouseWheel: true,
        scrollbars: 'custom'
      });

      helpers.onWindowResize(
        function() {
          var mainHeight = getHorizontalPageHeight();

          if ($viewport.height() > mainHeight) {
            !iscroll.enabled && iscroll.enable();
            iscroll.refresh();
          } else {
            iscroll.enabled && iscroll.disable();
          }
        },
        true,
        'contacts'
      );
    });

    $window.on('orientationchange.fluxus', function() {
      setTimeout(function() {
        $window.trigger('resize');
      }, 10);
    });

    // --------------------------------------------------------------------
    // 5. Shortcodes
    // --------------------------------------------------------------------

    // Shortcode: Tabs
    $('.tabs').each(function() {
      var $t = $(this);

      $t.find('.tabs-menu a')
        .click(function() {
          var $t = $(this),
            $p = $t.parent(),
            index = $p.prevAll().length;

          if ($p.is('.active')) {
            return false;
          }

          $p.parent()
            .find('.active')
            .removeClass('active');
          $p.addClass('active');

          $p.closest('.tabs')
            .find('.tab')
            .hide()
            .end()
            .find('.tab:eq(' + index + ')')
            .show();

          return false;
        })
        .each(function(index) {
          $(this)
            .wrapInner($('<span />'))
            .append($('<b>' + (index + 1) + '</b class="index">'));
        });
    });

    // Shortcode: Accordion
    $('.accordion').each(function() {
      var $accordion = $(this);

      $accordion.find('.panel-title a').click(function() {
        var $t = $(this);

        /**
         * This is the active panel. Let's collapse it.
         */
        if ($t.closest('.panel-active').length) {
          $t.closest('.panel-active')
            .find('.panel-content')
            .slideUp(500, function() {
              $(this)
                .closest('.panel-active')
                .removeClass('panel-active');
            });
          return false;
        }

        var $newPanel = $t.closest('.panel'),
          index = $newPanel.prevAll().length,
          $panelActive = $accordion.find('.panel-active');

        if ($panelActive.length) {
          $panelActive.find('.panel-content').slideUp(500, function() {
            $(this)
              .closest('.panel')
              .removeClass('panel-active');
            $accordion
              .find('.panel:eq(' + index + ') .panel-content')
              .slideDown(300)
              .closest('.panel')
              .addClass('panel-active');
          });
        } else {
          $accordion
            .find('.panel:eq(' + index + ') .panel-content')
            .slideDown(300)
            .closest('.panel')
            .addClass('panel-active');
        }

        return false;
      });
    });

    // Shortcode: Gallery
    $('.gallery-link-file').each(function() {
      $(this)
        .find('a')
        .fluxusLightbox();
    });

    $('.js-plyr').each(function() {
      var $el = $(this);
      var playerDefaultOptions = {
        // debug: true,
        controls: [
          'play-large',
          'play',
          'current-time',
          'mute',
          'volume',
          'fullscreen'
        ],
        autoplay: false,
        autopause: false,
        loop: { active: true },
        clickToPlay: true,
        disableContextMenu: false,
        keyboard: { focused: false, global: false },
        settings: []
      };
      var playerOptions = Object.assign({}, playerDefaultOptions);
      var isRepeatMode = $el.data('plyr-repeat-mode') !== undefined;
      var shouldAutoplay = false;

      // Repeat mode = no controls / autoplay
      if (isRepeatMode) {
        shouldAutoplay = true;
        playerOptions.controls = [];
        playerOptions.clickToPlay = false; // Click mutes / umutes
      }

      if ($el.attr('playsinline') !== undefined) {
        shouldAutoplay = true;
      }

      if (shouldAutoplay) {
        playerOptions.muted = true;
        playerOptions.volume = 0;
      }

      var plyr = new Plyr(this, playerOptions);

      plyr.on('ready', function(event) {
        // For some reason Plyr 3.4.6 when playing Vimeo does not care for volume / mute settings.
        if (shouldAutoplay) {
          plyr.volume = 0;
          plyr.muted = true;
        }

        if (isRepeatMode) {
          // Click to mute / umute
          var doubleClickTimer;
          var preventSingleClick = false;
          $(event.target)
            .on('click', function() {
              doubleClickTimer = setTimeout(function() {
                if (!preventSingleClick) {
                  plyr.muted = !plyr.muted;
                  if (plyr.muted) {
                    plyr.volume = 0;
                  } else {
                    plyr.volume = 100;
                  }
                }
                preventSingleClick = false;
              }, 200);
            })
            .on('dblclick', function() {
              clearTimeout(doubleClickTimer);
              preventSingleClick = true;
            });
        }

        var playResult = plyr.play();
        // For HTML5 players, play() will return a Promise in some browsers -
        // WebKit and Mozilla according to MDN at time of writing.
        if (
          shouldAutoplay &&
          playResult &&
          typeof playResult.catch === 'function'
        ) {
          playResult.catch(function() {
            /**
             * WHen trying to autoplay and failing, let's re-initialize player
             * without autoplay option.
             */
            var $container = $el.closest('.plyr');
            var $newEl = $el.removeAttr('data-plyr-repeat-mode').clone();
            $container.replaceWith($newEl);

            plyr = new Plyr(
              $newEl[0],
              Object.assign({}, playerOptions, {
                controls: playerDefaultOptions.controls
              })
            );
          });
        }
      });
    });

    $('.js-fade-in-image').each(function() {
      var $el = $(this);
      $.preloadImage($el.attr('src')).then(function() {
        $el.addClass('fade-in-image--loaded');
      });
    });

    $('.js-aspect-canvas').each(function() {
      var $el = $(this);
      var canvas = document.createElement('canvas');
      canvas.width = $el.attr('width');
      canvas.height = $el.attr('height');
      $el.attr('src', canvas.toDataURL('image/png'));
    });

    /**
     * Configure lazysizes plugin
     *
     * 1. Wraps <img class="lazyload" /> with <div class="lazyload-component" />
     * 2. Inserts a placeholder <img /> that matches size of
     *    original image (taken from data-width / data-height).
     *    This is superior to any percentage padding trick.
     * 3. Shows loading indicator when it takes longer than transition-delay.
     */
    window.lazySizesConfig = window.lazySizesConfig || {};
    window.lazySizesConfig.expand = 100; // Load only nearest invisible elements.

    $('.lazyload').each(function() {
      var $el = $(this);
      var $wrapper = $el.wrap($('<div class="lazyload-component" />')).parent();
      var $loading = $(
        '<div class="lazyload-component__loading translate-into-middle">'
      );
      $loading.append('<div class="fluxus-loading__indicator" />');
      $wrapper.append($loading);

      var canvas = document.createElement('canvas');
      canvas.width = $el.data('width');
      canvas.height = $el.data('height');
      var $aspectImage = $('<img />');
      $aspectImage.attr('src', canvas.toDataURL('image/png'));
      $wrapper.append($aspectImage);
    });

    document.addEventListener('lazyloaded', function(event) {
      $(event.target).removeAttr('srcset');
      var $parent = $(event.target).parent();
      $parent.addClass('lazyload-component--loaded');
    });
  });
})(jQuery, window.helpers);
